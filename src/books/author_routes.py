from fastapi import APIRouter, status, Depends
from typing import List
from sqlalchemy.orm import Session
from fastapi.exceptions import HTTPException
from src.database import SessionLocal

from src.books.schemas import Author, AuthorUpdateModel
from src.books.models import Author as AuthorModel
from src.books.schemas import CreateAuthor

author_router = APIRouter()

def get_db():
    with SessionLocal() as db:
        try:
            yield db
        finally:
            db.close()


# Get all authors
@author_router.get('/author', response_model=List[Author])
async def get_all_authors(db: Session = Depends(get_db)):
    result = db.query(AuthorModel).all()
    return result

# get a author by ID 
@author_router.get("/author/{author_id}", response_model=Author)
def get_author(author_id: int, db: Session = Depends(get_db)):
    result = db.query(AuthorModel).filter(AuthorModel.id == author_id).first()
    if not result:
        raise HTTPException(status_code=status.HTTP_404_NOT_FOUND, detail=f"Author not found with id: {author_id}")
    return result

# Create a Author 
@author_router.post("/author", status_code=status.HTTP_201_CREATED, response_model=Author)
def create_a_author(author_data: CreateAuthor, db: Session = Depends(get_db)):
    new_author = AuthorModel(**author_data.model_dump()) 
    db.add(new_author)
    db.commit()
    db.refresh(new_author)  # Refresh to get the autogenerated ID
    return new_author

# Update a author
@author_router.patch("/book/{author_id}", response_model=Author)
def update_book(author_id: int, book_update_data: AuthorUpdateModel, db: Session = Depends(get_db)):
    result = db.query(AuthorModel).filter(AuthorModel.id == author_id).first()
    # book = result.scalar_one_or_none()
    if not result:
        raise HTTPException(status_code=status.HTTP_404_NOT_FOUND, detail="No book found to update")

    for key, value in book_update_data.model_dump(exclude_unset=True).items():
        setattr(result, key, value)

    db.commit()
    db.refresh(result)
    return result

# Delete a author 
@author_router.delete("/author/{author_id}", status_code=status.HTTP_204_NO_CONTENT)
def delete_author(author_id: int, db: Session = Depends(get_db)):
    result = db.query(AuthorModel).filter(AuthorModel.id == author_id).first()
    if not result:
        raise HTTPException(status_code=status.HTTP_404_NOT_FOUND, detail="Author not found")

    db.delete(result)
    db.commit()
